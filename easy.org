* Easy

** 19. Last Element
#+BEGIN_SRC clojure
(comp first reverse)
#+END_SRC

** 20. Penultimate Element
#+BEGIN_SRC clojure
(comp second reverse)
#+END_SRC

** 21. Nth Element
#+BEGIN_SRC clojure
(fn [s n] 
  (last (take (inc n) s)))
#+END_SRC

** 22. Count a Sequence
#+BEGIN_SRC clojure
#(reduce (fn [x y] (inc x)) 0 %)
#+END_SRC

** 23. Reverse a Sequence
#+BEGIN_SRC clojure
#(reduce (fn [acc v] (cons v acc)) [] %)
#+END_SRC

** 24. Sum It All up
#+BEGIN_SRC clojure
(partial reduce +)
#+END_SRC

** 25. Find the odd numbers
#+BEGIN_SRC clojure
(partial filter odd?)
#+END_SRC

** 26. Fibonacci Sequence
#+BEGIN_SRC clojure
(fn [c] 
  (map last (take c (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))
#+END_SRC

** 27. Palindrome Detector
#+BEGIN_SRC clojure
#(= (seq %) (seq (reverse %)))
#+END_SRC

** 28. Flatten a Sequence
#+BEGIN_SRC clojure
#(filter (complement sequential?) (tree-seq sequential? seq %))
#+END_SRC

** 29. Get the Caps
#+BEGIN_SRC clojure
#(apply str (re-seq #"[A-Z]" %))
#+END_SRC

** 30. Compress a Sequence
#+BEGIN_SRC clojure
#(map first (partition-by identity %))
#+END_SRC

** 31. Pack a Sequence
#+BEGIN_SRC clojure
#(partition-by identity %)
#+END_SRC

** 32. Duplicate a Sequence
#+BEGIN_SRC clojure
(fn [v] mapcat #(repeat %) v))
#+END_SRC

** 33. Replicate a Sequence
#+BEGIN_SRC clojure
#(mapcat (partial repeat %2) %1)
#+END_SRC

** 34. Implement range
#+BEGIN_SRC clojure
#(take (- %2 %1) (iterate inc %1))
#+END_SRC

** 38. Maximum Value
#+BEGIN_SRC clojure
(fn [& nums] 
  (reduce #(if (> %1 %2) %1 %2) nums))
#+END_SRC

** 39. Interleave Two Seqs
#+BEGIN_SRC clojure
mapcat vector
#+END_SRC

** 40. Interpose a Seq
#+BEGIN_SRC clojure
(fn [v col] 
  (butlast (mapcat #(vector % v) col)))
#+END_SRC

** 41. Drop Every Nth Item
#+BEGIN_SRC clojure
(fn [col v] 
  (mapcat #(take (dec v) %) (partition-all v col)))
#+END_SRC

** 42. Factorial Fun
#+BEGIN_SRC clojure
#(reduce * (reset (range (inc %))))
#+END_SRC

** 45. Intro to Interate
#+BEGIN_SRC clojure
'(1 4 7 10 13)
#+END_SRC

** 47. Contain Yourself
#+BEGIN_SRC clojure
4
#+END_SRC

** 48 Intro to some
#+BEGIN_SRC clojure
6
#+END_SRC

** 49. Split a sequence
#+BEGIN_SRC clojure
(fn [n v]
  (vector (take n v) (drop n v)))
#+END_SRC

** 51. Advanced Destructuring
#+BEGIN_SRC clojure
[1 2 3 4 5]
#+END_SRC

** 55. Count Occurrences
#+BEGIN_SRC clojure
#(reduce (fn [m v] (assoc m v (inc (m v 0)))) {} %)

#(into {} (for [[k v] (group-by identity %)] [k (count v)]))
#+END_SRC

** 61. Advanced Destructuring
#+BEGIN_SRC clojure
#(into {} (map hash-map %1 %2))
#+END_SRC

** 62. Advanced Destructuring
#+BEGIN_SRC clojure
(fn it [f x]
  (lazy-seq (cons x (it f (f x)))))
#+END_SRC
